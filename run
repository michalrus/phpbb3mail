#!/usr/bin/perl

#
#   Copyright 2013 Michał Rus <m@michalrus.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

use strict;
use warnings;
use utf8;

use DBI;
use LWP::UserAgent;
use HTTP::Cookies;
use HTML::Entities;
use Date::Calc;
use Net::SMTP::SSL;
use File::Basename;
use Encode qw/encode decode/;
use Bytes::Random::Secure;

my $rng = Bytes::Random::Secure->new(
	Bits        => 128,
	NonBlocking => 1,
);

# ------------------------- config

my %cfg = ();

my %cfg_fields = map { $_ => 1 } ('BoardURL', 'BoardUsername', 'BoardPassword', 'MailTo', 'GmailFromName', 'GmailFromEmail', 'GmailPassword');

my $cfg_file = dirname($0) . '/config.cfg';

unless (open FP, '<', $cfg_file) {
	print $cfg_file . ": " . $! . "\n\nPlease, copy config.cfg.sample to config.cfg\nand modify it to suit your needs.\n";
	exit;
};

my $line_num = 0;
while (my $line = <FP>) {
	$line_num++;
	chomp $line;
	if ($line =~ m/^\s*(#.*)?$/) {
		next;
	}
	elsif ($line =~ m/^\s*([a-z]+)\s+"(.*?)"\s*?$/i) {
		my $key = $1;
		my $val = $2;

		unless (exists($cfg_fields{$key})) {
			print $cfg_file . ': unknown key `' . $key . '\' on line ' . $line_num . ":\n\n    " . $line . "\n\n";
			exit;
		}

		$cfg{$key} = $val;
	}
	else {
		print $cfg_file . ': WTF on line ' . $line_num . ":\n\n    " . $line . "\n\n";
		exit;
	}
}

close FP;

for my $key (keys %cfg_fields) {
	unless (exists($cfg{$key})) {
		print $cfg_file . ': required key `' . $key . "\' not found\n";
		exit;
	}
}

# ------------------------- mail

my $smtp;

END {
	if ($smtp) {
		$smtp->quit();
	}
}

sub notify {
	my ($subject, $msg, $message_id, $in_reply_to, $references) = @_;

	unless ($smtp) {
		{
			local $main::SIG{__WARN__} = sub {
				my $warn = $_[0];
				unless ($warn =~ m/default of SSL_verify_mode of SSL_VERIFY_NONE/) {
					warn $warn;
				}
			};
			$smtp = Net::SMTP::SSL->new('smtp.gmail.com', Port => 465, Timeout => 30, Hello => 'phpbb3mail', Debug => 0)
				or die "Could not connect to SMTP server; $!";
		}

		$smtp->auth ($cfg{'GmailFromEmail'}, $cfg{'GmailPassword'})
		        or die "Could not authenticate with SMTP; $!";
	}

	$smtp->mail($cfg{'GmailFromEmail'});
	$smtp->to($cfg{'MailTo'});

	$smtp->data();

	$smtp->datasend('To: ' . $cfg{'MailTo'} . "\n");
	$smtp->datasend('From: ' . $cfg{'GmailFromName'} . ' <' . $cfg{'GmailFromEmail'} . '>' . "\n");
	$smtp->datasend('Subject: ' . encode('MIME-Q', $subject) . "\n");
	if (length $message_id) {
		$smtp->datasend('Message-ID: ' . $message_id . "\n");
	}
	if (length $in_reply_to) {
		$smtp->datasend('In-Reply-To: ' . $in_reply_to . "\n");
	}
	if (length $references) {
		$smtp->datasend('References: ' . $references . "\n");
	}
	$smtp->datasend('Content-Type: text/html; charset=UTF-8; format=flowed' . "\n");
	$smtp->datasend('Content-Transfer-Encoding: 8bit' . "\n");
	$smtp->datasend('MIME-Version: 1.0' . "\n");
	$smtp->datasend("\n\n");

	$smtp->datasend('<html><head></head><body>');
	$smtp->datasend($msg);
	$smtp->datasend('</body></html>' . "\n");

	$smtp->dataend();
}

# ------------------------- connect to the database, create tables

my $file_cookies = dirname($0) . '/cookies.dat';
my $file_db = dirname($0) . '/data.db';

my $dbh = DBI->connect('dbi:SQLite:dbname=' . $file_db, '', '',	{ RaiseError => 1, sqlite_unicode => 1 });

my $stmt;

$dbh->do('CREATE TABLE IF NOT EXISTS post (
	id          INT  NOT NULL PRIMARY KEY,
	thread_id   INT  NOT NULL,
	thread_name TEXT NOT NULL,
	forum_id    INT  NOT NULL,
	forum_name  TEXT NOT NULL,
	author_id   INT  NOT NULL,
	author_name TEXT NOT NULL,
	date        TEXT NOT NULL,
	timestamp   INT  NOT NULL,
	message_id  TEXT
	)');
$dbh->do('CREATE INDEX IF NOT EXISTS thread_id ON post (thread_id, timestamp)');

$dbh->do('CREATE TABLE IF NOT EXISTS runtime (
	key         TEXT NOT NULL PRIMARY KEY,
	val         TEXT NOT NULL
	)');

sub kv_set_if_not_exists {
	my ($key, $val) = @_;
	my $stmt = $dbh->prepare('INSERT OR IGNORE INTO runtime (key, val) VALUES(?, ?)');
	$stmt->execute($key, $val);
}

# defaults
kv_set_if_not_exists('previously_succeeded', 'yes');

sub kv_set {
	my ($key, $val) = @_;
	my $stmt = $dbh->prepare('INSERT OR REPLACE INTO runtime (key, val) VALUES(?, ?)');
	$stmt->execute($key, $val);
}

sub kv_get {
	my ($key) = @_;
	my $stmt = $dbh->prepare('SELECT val FROM runtime WHERE key = ?');
	$stmt->execute($key);
	my ($value) = $stmt->fetchrow_array;
	return $value;
}

# ------------------------- error handling (notify by mail)

sub mydie {
	my $msg = join(' ', @_);
	my ($package, $filename, $line) = caller;

	chomp $msg;
	$msg = "<p>" . $msg . "<br/>\n" . '<i style="color: gray;">(line ' . $line . ' of `' . $package . '\' in `' . $filename . "\')</i></p>\n";
	$msg .= "<p>You will be notified when it goes up again.</p>\n";

	if (kv_get('previously_succeeded') eq 'yes') {
		notify("Target is down.", $msg);
		kv_set('previously_succeeded', 'no');
	}

	exit;
}

sub succeeded {
	if (kv_get('previously_succeeded') eq 'yes') {
		return;
	}

	my $msg = 'The HTTP server is back up.';
	my ($package, $filename, $line) = caller;

	chomp $msg;
	$msg = "<p>" . $msg . "<br/>\n" . '<i style="color: gray;">(line ' . $line . ' of `' . $package . '\' in `' . $filename . "\')</i></p>\n";

	notify("Target is back up.", $msg);
	kv_set('previously_succeeded', 'yes');
}

# ------------------------- get new data

my $cookie_jar = HTTP::Cookies->new(
	file => $file_cookies,
	autosave => 1,
);

my $ua = LWP::UserAgent->new;
$ua->cookie_jar($cookie_jar);
$ua->agent('Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2');
push @{ $ua->requests_redirectable }, 'POST';

$ua->add_handler(request_prepare => sub {
	my($request, $ua, $h) = @_;
#	print $request->as_string(), "\n";
});

$ua->add_handler(response_header => sub {
	my($response, $ua, $h) = @_;
#	print $response->as_string(), "\n";
});

my $r = $ua->get($cfg{'BoardURL'} . '/search.php?&sr=topics&search_id=unread');

if ($r->is_success) {
	succeeded;
}
else {
	mydie 'Cannot reach HTTP server; ', $r->status_line;
}

$r = $r->decoded_content((charset => 'UTF-8'));

if ($r =~ m/Zaloguj<\/title>/mis) {
	my $sid = '';
	if ($r =~ m/name="sid"\s+value="([^"]+)"/mis) {
		$sid = $1;
	}

	$r = $ua->post($cfg{'BoardURL'} . '/ucp.php?mode=login', [
		'username' => $cfg{'BoardUsername'},
		'password' => $cfg{'BoardPassword'},
		'autologin' => '',
		'redirect' => 'search.php?&sr=topics&search_id=unread',
		'sid' => '',
		'login' => 'Zaloguj'
		]);

	mydie 'Cannot reach HTTP server; ', $r->status_line
		unless $r->is_success;

	$r = $ua->get($cfg{'BoardURL'} . '/search.php?&sr=topics&search_id=unread');

	mydie 'Cannot reach HTTP server; ', $r->status_line
		unless $r->is_success;

	$r = $r->decoded_content((charset => 'UTF-8'));
}

if ($r =~ m/Wyszukiwarka\s+nic\s+nie\s+znalazła/mis) {
	exit;
}

my @tbl = split /<tr\s+valign="middle">/mis, $r;
shift @tbl;

# ------------------------- parse <tr/> rows and generate new threads

my $timestamp = time();

$stmt = $dbh->prepare('INSERT OR IGNORE INTO post
	(id, thread_id, thread_name, forum_id, forum_name, author_id, author_name, date, timestamp)
	VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)');

foreach my $row (@tbl) {
	$row =~ s/<\/tr>.*//mis;

	my $post_id = 0;
	my $thread_id = 0;
	my $thread_name = '';
	my $forum_id = 0;
	my $forum_name = '';
	my $author_id = 0;
	my $author_name = '';
	my $date = '';

	if ($row =~ m/\.\/viewtopic\.php\?f=(\d+)&amp;t=(\d+)&amp;p=(\d+)#p\d+/mis) {
		$forum_id  = $1 + 0;
		$thread_id = $2 + 0;
		$post_id   = $3 + 0;
	}
	else {
		next;
	}

	if ($row =~ m/w <a href="\.\/viewforum\.php\?f=\d+">([^<]+)<\/a>/mis) {
		$forum_name = decode_entities($1);
	}

	if ($row =~ m/class="topictitle">([^<]+)<\/a>/mis) {
		$thread_name = decode_entities($1);
	}

	if ($row =~ m/<p class="topicdetails"><a href="\.\/memberlist\.php\?mode=viewprofile&amp;u=(\d+)"[^>]*>([^<]+)<\/a>/mis) {
		$author_id   = $1 + 0;
		$author_name = decode_entities($2);
	}

	if ($row =~ m/<p class="topicdetails">[^ ]+ (\d\d [^ ]+, \d\d\d\d \d\d:\d\d)<\/p>/mis) {
		$date = decode_entities($1);
	}

	$stmt->execute($post_id, $thread_id, $thread_name, $forum_id, $forum_name, $author_id, $author_name, $date, $timestamp);

	if (0 == 1) {
		print "post_id:      " . $post_id . "\n";
		print "thread_id:    " . $thread_id . "\n";
		print "thread_name:  " . $thread_name . "\n";
		print "forum_id:     " . $forum_id . "\n";
		print "forum_name:   " . $forum_name . "\n";
		print "author_id:    " . $author_id . "\n";
		print "author_name:  " . $author_name . "\n";
		print "date:         " . $date . "\n";
		print "\n";
	}
}

# ------------------------- notify about new posts

$stmt = $dbh->prepare('SELECT id, thread_id, thread_name, forum_name, author_name, date
	FROM post WHERE message_id IS NULL
	ORDER BY timestamp ASC, id ASC');

$stmt->execute();

while (my $post = $stmt->fetchrow_hashref()) {
	my $message_id = '<' . $rng->string_from('abcdefghijklmnopqrstuvwxyz0123456789', 32) . '@michalrus.com>';

	my $in_reply_to = '';
	my $references = '';

	my $stmt2 = $dbh->prepare('SELECT message_id FROM post WHERE message_id IS NOT NULL AND thread_id = ? ORDER BY timestamp ASC, id ASC');
	$stmt2->execute($post->{'thread_id'});
	while (my $msg = $stmt2->fetchrow_hashref()) {
		$in_reply_to = $msg->{'message_id'};
		if (length $references) {
			$references .= "\n\t";
		}
		$references .= $in_reply_to;
	}

	my $subject = '[' . $post->{'forum_name'} . '] ' . $post->{'thread_name'};

	my $msg = '<p>'
		. '<a href="' . $cfg{'BoardURL'} . '/viewtopic.php?p='
		. $post->{'id'} . '#p'
		. $post->{'id'} . '">'
		. '<i>'	. $post->{'date'} . '</i>'
		. '</a>'
		. ' by '
		. '<strong>' . $post->{'author_name'} . '</strong>'
		. '</p>'
		. "\n";

	if (0 == 0) {
		notify($subject, $msg, $message_id, $in_reply_to, $references);

		$stmt2 = $dbh->prepare('UPDATE post SET message_id = ? WHERE id = ?');
		$stmt2->execute($message_id, $post->{'id'});
	}
}
